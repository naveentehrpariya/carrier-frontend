import   { useContext, useEffect, useRef, useState } from 'react'
import { UserContext } from '../../../context/AuthProvider';
import Api from '../../../api/Api';
import { useParams, Link } from 'react-router-dom';
import AuthLayout from '../../../layout/AuthLayout';
import Logotext from '../../common/Logotext';
import TimeFormat from '../../common/TimeFormat';
import Currency from '../../common/Currency';
import { jsPDF } from "jspdf";
import Loading from '../../common/Loading';
import DistanceInMiles from '../../common/DistanceInMiles';
import html2canvas from "html2canvas";
import { 
  generateUltraOptimizedPDF, 
  generateBalancedPDF,
  generateSmartOptimizedPDF,
  generateHTML2PDF,
  generateBalancedHTML2PDF,
  generateSelectableTextPDF,
  generateReliablePDF,
  getUltraOptimizedPDFConfig, 
  getUltraOptimizedCanvasConfig,
  ultraCompressImage,
  getMinimalHeaderCanvasConfig
} from '../../../utils/pdfOptimization';

export default function OrderPDF() {
   
   
   const [loading, setLoading] = useState(true);
   const [order, setOrder] = useState([]);
   const {Errors, company} = useContext(UserContext);
   const { id } = useParams();
   const [downloadingPdf, setDownloadingPdf] = useState(false);
   const pdfRef = useRef();
   const todaydate = new Date(); 

   const printPDFSelectable = () => {
      const element = pdfRef.current;
      const headerElement = document.getElementById('pdf-header-html');
      if (!element || !headerElement) return;

      const printWindow = window.open('', '_blank');
      const styles = `
        <style>
          @page { size: A4; margin: 10mm; }
          @media print {
            html, body { height: auto; margin: 0; padding: 0; }
            .page { width: 210mm; min-height: 297mm; margin: 0 auto; padding: 15px; box-sizing: border-box; }
          }
          body { 
            font-family: Arial, sans-serif; 
            color: #000; 
            background: white;
            line-height: 1.4;
            font-size: 12px;
          }
          
          /* Header Styling */
          .rate-confirmation-header {
            border-bottom: 2px solid #ddd;
            padding-bottom: 16px;
            margin-bottom: 16px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
          }
          
          .rate-confirmation-title {
            font-size: 32px;
            font-weight: 900;
            color: #111;
            text-transform: uppercase;
            margin-bottom: 8px;
          }
          
          .company-title {
            font-size: 20px;
            font-weight: 700;
            margin-top: 12px;
            margin-bottom: 4px;
          }
          
          .company-address {
            font-size: 18px;
            margin-top: 4px;
          }
          
          .logo-section {
            text-align: right;
            padding-right: 24px;
          }
          
          .pro-number {
            color: #374151;
            font-size: 18px;
            margin-bottom: 8px;
          }
          
          /* From/Carrier Section */
          .from-carrier-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 32px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 16px;
            margin-bottom: 16px;
          }
          
          .section-title {
            color: #1d4ed8;
            font-weight: 700;
            font-size: 18px;
            margin-bottom: 8px;
          }
          
          .carrier-name {
            text-transform: uppercase;
            font-weight: 600;
          }
          
          /* Employee Section */
          .employee-section {
            border-bottom: 1px solid #ddd;
            padding-bottom: 16px;
            margin-bottom: 16px;
          }
          
          .employee-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 32px;
          }
          
          /* Order Details */
          .order-details-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-bottom: 16px;
          }
          
          .detail-item {
            display: flex;
            align-items: center;
          }
          
          .detail-label {
            font-weight: 700;
            margin-right: 4px;
          }
          
          /* Charges Table */
          .charges-section {
            margin-bottom: 24px;
          }
          
          .charges-title {
            font-weight: 600;
            margin-bottom: 8px;
            margin-top: 16px;
            font-size: 18px;
          }
          
          table { 
            border-collapse: collapse; 
            width: 100%; 
            margin-bottom: 16px;
          }
          
          th, td { 
            border: 1px solid #999;
            padding: 12px 8px;
            text-align: left;
            font-size: 12px;
          }
          
          th {
            background-color: #f3f4f6;
            color: #111;
            font-weight: 700;
          }
          
          .total-row {
            background-color: #f3f4f6;
            font-weight: 700;
            color: #111;
          }
          
          /* Location Sections */
          .locations-section {
            margin-bottom: 24px;
          }
          
          .pickup-section {
            margin-bottom: 16px;
          }
          
          .pickup-title {
            color: #1d4ed8;
            font-weight: 700;
            margin-bottom: 8px;
          }
          
          .stop-section {
            background: #dbeafe;
            padding: 12px;
            border: 1px solid #93c5fd;
            border-radius: 6px;
            margin-bottom: 16px;
          }
          
          .stop-title {
            color: #dc2626;
            font-weight: 700;
            margin-bottom: 8px;
          }
          
          /* Footer */
          .rate-footer {
            text-align: center;
            margin-top: 32px;
            font-size: 11px;
            color: #666;
          }
          
          /* Utility Classes */
          .flex {
            display: flex;
          }
          
          .items-center {
            align-items: center;
          }
          
          .justify-between {
            justify-content: space-between;
          }
          
          .font-bold {
            font-weight: 700;
          }
          
          .text-lg {
            font-size: 18px;
          }
          
          .text-xl {
            font-size: 20px;
          }
          
          .mb-2 {
            margin-bottom: 8px;
          }
          
          .mb-4 {
            margin-bottom: 16px;
          }
          
          .mt-2 {
            margin-top: 8px;
          }
          
          .mt-4 {
            margin-top: 16px;
          }
          
          .uppercase {
            text-transform: uppercase;
          }
        </style>
      `;

      const printable = document.createElement('div');
      printable.className = 'page';

      // Simply clone elements without complex class modifications
      const headerClone = headerElement.cloneNode(true);
      headerClone.style.cssText = `
        position: relative;
        top: 0;
        left: 0;
        width: 100%;
        margin-bottom: 20px;
        display: block;
        visibility: visible;
      `;

      const contentClone = element.cloneNode(true);
      contentClone.style.cssText = `
        position: relative;
        width: 100%;
        display: block;
        visibility: visible;
      `;

      printable.appendChild(headerClone);
      printable.appendChild(contentClone);

      printWindow.document.write(`<!doctype html><html><head><meta charset="utf-8"/>${styles}</head><body></body></html>`);
      printWindow.document.body.appendChild(printable);

      // Ensure images/fonts load then print
      setTimeout(() => {
        printWindow.focus();
        printWindow.print();
        printWindow.close();
      }, 400);
   };

   const downloadPDF = async () => {
      setDownloadingPdf(true);
      window.scrollTo(0, 0);
      
      const element = pdfRef.current;
      const headerElement = document.getElementById("pdf-header-html");

      if (!element || !headerElement) {
         console.error("Missing content or header element.");
         setDownloadingPdf(false);
         return;
      }

      try {
         // Try text-selectable PDF first - preserves design with copyable text
         await generateSelectableTextPDF(
            element,
            headerElement,
            `Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`,
            () => setDownloadingPdf(false)
         );
      } catch (error) {
         console.error('Text-selectable PDF generation failed, trying reliable PDF:', error);
         
         try {
            // Fallback to reliable PDF
            await generateReliablePDF(
               element,
               `Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`
            );
            setDownloadingPdf(false);
         } catch (reliableError) {
            console.error('Reliable PDF generation failed, trying balanced html2pdf:', reliableError);
         
         try {
            // Fallback to balanced html2pdf
            await generateBalancedHTML2PDF(
               element,
               `Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`
            );
            setDownloadingPdf(false);
         } catch (balancedError) {
            console.error('Balanced html2pdf generation failed, trying regular html2pdf:', balancedError);
         
         try {
            // Fallback to regular html2pdf
            await generateHTML2PDF(
               element,
               `Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`
            );
            setDownloadingPdf(false);
         } catch (html2pdfError) {
            console.error('html2pdf generation failed, trying smart optimized:', html2pdfError);
         
         try {
            // Fallback to smart optimized PDF generation
            await generateSmartOptimizedPDF(
               element,
               headerElement,
               `Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`,
               () => setDownloadingPdf(false)
            );
         } catch (smartError) {
            console.error('Smart optimized PDF generation failed, trying balanced:', smartError);
         
            // Fallback to balanced generation
            try {
               await generateBalancedPDF(
                  element,
                  headerElement,
                  `Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`,
                  () => setDownloadingPdf(false)
               );
            } catch (balancedError) {
               console.error('Balanced PDF generation failed, trying ultra-optimized:', balancedError);
               
               // Further fallback to ultra-optimized generation
               try {
                  await generateUltraOptimizedPDF(
                     element,
                     headerElement,
                     `Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`,
                     () => setDownloadingPdf(false)
                  );
               } catch (ultraError) {
                  console.error('Ultra-optimized PDF generation failed, trying manual:', ultraError);
                  
                  // Final fallback to manual generation
                  try {
                     const headerCanvas = await html2canvas(headerElement, getMinimalHeaderCanvasConfig());
                     const headerImgData = await ultraCompressImage(headerCanvas.toDataURL('image/jpeg', 0.3));
                     const headerHeight = ((headerCanvas.height * 210) / headerCanvas.width) - 5;

                     const doc = new jsPDF(getUltraOptimizedPDFConfig());
                     
                     doc.html(element, {
                        callback: function (doc) {
                           const totalPages = doc.internal.getNumberOfPages();
                           
                           for (let i = 1; i <= totalPages; i++) {
                              doc.setPage(i);
                              doc.addImage(headerImgData, "JPEG", 12.5, 0, 185, headerHeight, '', 'FAST');
                              // Skip watermark to reduce file size further
                           }
                           
                           doc.save(`Order_CMC${order?.serial_no || ''}_Rate_Confirmation.pdf`);
                           setDownloadingPdf(false);
                        },
                        x: 12.5,
                        y: 0,
                        html2canvas: getUltraOptimizedCanvasConfig(),
                        autoPaging: 'text',
                        width: 185,
                        windowWidth: 794,
                        margin: [headerHeight, 0, 20, 0],
                     });
                  } catch (fallbackError) {
                     console.error('Manual PDF generation also failed:', fallbackError);
                     setDownloadingPdf(false);
                  }
               }
            }
         }
         }
         }
      }
   };


   const fetchOrder = () => {
      setLoading(true);
      const resp = Api.get(`/order/detail/${id}`);
      resp.then((res) => {
         setLoading(false);
         if (res.data.status) {
            setOrder(res.data.order);
         } else {
            setOrder(null);
         }
         setLoading(false);
      }).catch((err) => {
         setLoading(false);
         Errors(err);
      });
   }

   useEffect(() => {
      fetchOrder();
   }, []);


   return <AuthLayout>
      {loading ? <Loading /> : 
         <div className='bg-white p-[30px]'>
            <div className=' max-w-[794px] mx-auto flex justify-between items-center mb-6'>
               <h1 className='text-xl font-bold text-black mb-6 mt-4'>Customer Order #{order?.serial_no}</h1>
               <div className='flex items-center gap-2'>
                  <button className='bg-main px-4 py-2 rounded-xl text-normal test' onClick={downloadPDF} >{downloadingPdf ? "Downloading..." : "Download PDF"}</button>
                  <button className='bg-gray-800 text-white px-4 py-2 rounded-xl text-normal' onClick={printPDFSelectable}>Print (text-selectable)</button>
               </div>
            </div>
            <div className="relative max-w-[794px] mx-auto p-[40px] bg-white text-sm text-black shadow-md font-sans">
               {/* Header start */}
               <div className='relative z-1 '> 
                  <div className="flex justify-between items-center border-b pb-4 mb-4">
                  <div>
                        <div className="font-semibold text-3xl text-start font-bold uppercase">Rate Confirmation</div>
                        <div className="font-bold text-lg">Cross Miles Carrier</div>
                        <div>{company?.address}</div>
                     </div>
                     <div className="text-right pe-6 ">
                        <Logotext black={true} />
                        <div className="text-gray-700 text-lg text-end">PRO # CMC{order?.serial_no}</div>
                        <div className="text-normal text-end"><TimeFormat date={todaydate} /></div>
                     </div>
               </div>
            </div>
            {/* Header end */}

            <div ref={pdfRef} 
            data-pdf-root="true"
            style={{
                     width: '794px',
                     minWidth: '794px',
                     maxWidth: '794px',
                     background: '#fff',
                     color: '#222',
                     fontFamily: 'sans-serif',
                     padding: '10px 10px 10px 10px'
                  }}
                  >
               
               {/* Hidden HTML header for PDF, off-screen */}
               <div id="pdf-header-html" 
                  style={{
                     position: "absolute",
                     top: "-9999px",
                     left: "-9999px",
                     width: "794px", // match PDF content width
                     padding: "10px",
                     fontSize: "12px",
                     boxSizing: "border-box",
                     backgroundColor: "white",
                  }}>
                  <div className="flex justify-between items-start border-b pb-4 mb-4">
                     <div>
                        <div className="font-semibold text-3xl text-start font-bold uppercase">Rate Confirmation</div>
                        <div className="font-bold text-xl mt-3">Cross Miles Carrier</div>
                        <div className='mt-1 text-[18px]'>{company?.address} </div>
                     </div>
                     <div className="text-right pe-6 ">
                        <Logotext black={true} />
                        <div className="text-gray-700 text-lg text-end">PRO # CMC{order?.serial_no}</div>
                        <div className="text-normal text-end"><TimeFormat date={todaydate} /></div>
                     </div>
                  </div>
               </div>

               <div className="grid grid-cols-2 gap-8 border-b pb-4 mb-4">
                  <div>
                     <h3 className="text-blue-700 font-bold text-lg">FROM</h3>
                     <p>{company?.name}</p>
                     <p className='block'>{company?.email}</p>
                     <p>{company?.phone}</p>
                     <p>{company?.address}</p>
                  </div>

                  <div>
                     <h3 className="text-blue-700 font-bold text-lg">CARRIER</h3>
                     <p className='uppercase'>{order?.carrier?.name}(MC{order?.carrier?.mc_code})</p>
                     <p>{order?.carrier?.phone}{order?.carrier?.secondary_phone ? `, ${order?.carrier?.secondary_phone}` :''}</p>
                     <p>{order?.carrier?.email.trim()}</p>
                     <p>{order?.carrier?.location}</p>
                  </div>
               </div>
               
               {/* Employee Information Section */}
               {order?.created_by && (
                  <div className="border-b pb-4 mb-4">
                     <h3 className="text-blue-700 font-bold text-lg mb-2">PROCESSED BY</h3>
                     <div className="grid grid-cols-2 gap-8">
                        <div>
                           <p><strong>Employee Name:</strong> 
                              {order?.created_by?.name ? 
                                 <Link to={`/employee/detail/${order.created_by._id}`} className='text-blue-600 hover:text-blue-700 font-semibold ml-1'>
                                    {order.created_by.name}
                                 </Link>
                                 : 'N/A'
                              }
                           </p>
                           <p><strong>Employee ID:</strong> {order?.created_by?.corporateID || 'N/A'}</p>
                        </div>
                        <div>
                           <p><strong>Email:</strong> {order?.created_by?.email}</p>
                           <p><strong>Phone:</strong> {order?.created_by?.phone || 'N/A'}</p>
                        </div>
                     </div>
                  </div>
               )}

               <div className='relative'>
                  {order && order.shipping_details && order.shipping_details.map((s, index) => {
                     return <div key={index}>
                           <div className="grid grid-cols-2 gap-2 mb-4">
                              <p className='flex items-center'><strong>Order No : </strong> #CMC{order?.serial_no ||''}</p>
                              <p className='flex items-center'><strong>Commodity : </strong> {s?.commodity?.value || s?.commodity}</p>
                              {s?.reference && (
                                 <p className='flex items-center'><strong>Commodity Reference : </strong> {s.reference}</p>
                              )}
                              <p className='flex items-center'><strong>Total Distance : </strong> <DistanceInMiles d={order.totalDistance} /></p>
                              <p className='flex items-center'><strong>Equipments : </strong> {s?.equipment?.value}</p>
                              <p className='flex items-center'><strong>Weight : </strong> {s?.weight ||''}{s?.weight_unit ||''}</p>
                           </div>

                           <div className="mb-6">
                              <h3 className="font-semibold mb-2 mt-4 text-lg">Charges</h3>
                              <table cellPadding={8} align='center' className="w-full border text-normal table-collapse ">
                                 <thead className="bg-gray-100">
                                    <tr>
                                       <th className="border text-left">Charge Type</th>
                                       <th className="border text-left">Comment</th>
                                       <th className="border text-left">Rate</th>
                                       <th className="border text-left">Total</th>
                                    </tr>
                                 </thead>
                                 <tbody>
                                    {order && order.carrier_revenue_items && order.carrier_revenue_items.map((r, index) => {
                                       return <tr key={index}>
                                          <td className='border'>{r?.revenue_item}</td>
                                          <td className='border text-left text-[15px] max-w-[200px]'>{r?.note}</td>
                                          <td className='border text-left'><Currency  onlySymbol={true} currency={order?.revenue_currency || 'cad'} />{r?.rate}*{r?.quantity || 0}</td>
                                          <td className='border text-left'><Currency amount={r?.rate*r?.quantity || 0} currency={order?.revenue_currency || 'cad'} /></td>
                                       </tr>
                                    })}
                                    <tr>
                                       <td colSpan={2} align='left' className='border' ><strong style={{ color: "#111" }}></strong></td>
                                       <td  align='left' className='border bg-gray-100' ><strong style={{ color: "#111" }}>Total</strong></td>
                                       <td   align='left' className='border bg-gray-100'  style={{ fontWeight: 700, color: "#111" }}>
                                          <Currency amount={order.carrier_revenue_items.reduce((acc, item) => acc + (item.rate * item.quantity), 0)} currency={order?.revenue_currency || 'cad'} />
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>

                           <div className="mb-6">
                              {s && s.locations && (() => {
                                 let pickupCount = 0;
                                 let stopCount = 0;
                                 return s && s.locations && s.locations.map((l, index) => {
                                    if(l.type === 'pickup'){
                                       pickupCount = pickupCount+1;
                                       return <div key={index} className="mb-4">
                                          <h4 className="text-blue-700 font-bold">PICK {pickupCount}</h4>
                                          <p>{l?.location}</p>
                                          <p><TimeFormat time={false} date={l?.date} /> {l?.appointment ?  <b>(Appointment : {l?.appointment})</b>: ''} </p>
                                          <p>Ref #: {l?.referenceNo}</p>
                                       </div>
                                    } else {
                                       stopCount = stopCount+1;
                                       return <div key={index} className="mb-4 bg-blue-100 p-3 border rounded-md">
                                          <h4 className="text-red-700 font-bold">STOP {stopCount}</h4>
                                          <p>{l?.location}</p>
                                          <p><TimeFormat time={false} date={l?.date} /> {l?.appointment ?  <b>(Appointment : {l?.appointment})</b>: ''} </p>
                                          <p>Ref #: {l?.referenceNo}</p>
                                       </div>
                                    }
                                 })
                              })()}
                           </div>
                           
                     </div>
                  })}
               </div>
              
              


               {/* Terms & Notes */}
               <div className=" leading-snug border-t pt-4">
                  {(() => {
                     const defaultTerms = `Carrier is responsible to confirm the actual weight and count received from the shipper before transit.

Additional fees such as loading/unloading, pallet exchange, etc., are included in the agreed rate.

POD must be submitted within 5 days of delivery.

Freight charges include $100 for MacroPoint tracking. Non-compliance may lead to deduction.

Cross-border shipments require custom stamps or deductions may apply.`;
                     
                     const termsToDisplay = company?.rate_confirmation_terms || defaultTerms;
                     
                     return termsToDisplay.split('\n').map((line, index) => (
                        <p key={index} className={index === 0 ? '' : 'mt-1'}>
                           {line}
                        </p>
                     ));
                  })()}
               </div>
               <div className="flex justify-between items-center mt-6">
               <div>
                  <div className="font-semibold mb-2">Carrier Signature:</div>
                  <div className="border-b-2 border-black w-64 h-12 mb-2"></div>
                  <div className="text-sm text-gray-600">Sign here</div>
               </div>
               <div className="text-right">
                  <div>Date: {(todaydate.getMonth()+1) > 9 ? (todaydate.getMonth()+1) : '0'+(todaydate.getMonth()+1)} / {todaydate.getDate()} /  {todaydate.getFullYear()}  {todaydate.getHours()}:{todaydate.getMinutes().toString().padStart(2,'0')} {todaydate.getHours() >= 12 ? 'PM' : 'AM'}</div>
                  <div className="text-xs mt-1">PRO# CMC{order?.serial_no} must appear on all invoices</div>
               </div>
               </div>
            </div>
            </div>
         </div>
      }
   </AuthLayout>
}
